#!/bin/bash -e

show_help() {
    echo "usage: prepare"
    echo "       restore"
    echo "       build-core-image"
    echo "       start-new-core-vm [--param-cd PARAM] [--param-mem PARAM]"
    echo "       build-classic-image"
    echo "       start-new-classic-vm"
    echo "       start-existing-vm"
    echo "       shutdown-existing-vm"
    echo "       delete-existing-vm"
    echo ""
    echo "Available options:"
    echo "  -h --help   show this help message."
    echo ""
}

prepare() {
    nested_prepare_env
}

restore() {
    nested_cleanup_env
}

build_core_image() {
    nested_create_core_vm
}

start-new-core-vm() {
    local START_ENV=""
    while [ $# -gt 0 ]; do
        case "$1" in
            --param-cd)
                export NESTED_PARAM_CD="$2"
                shift 2
                ;;
            --param-mem)
                export NESTED_PARAM_MEM="$2"
                shift 2
                ;;
            *)
                echo "nested-state: unsupported parameter $1" >&2
                exit 1
                ;;
        esac
    done

    nested_start_core_vm
}

build_classic_image() {
    nested_create_classic_vm
}

start_new_classic_vm() {
    nested_start_classic_vm
}

start-existing-vm() {
    nested_start
}

shutdown-existing-vm() {
    nested_shutdown
}

delete-existing-vm() {
    nested_destroy_vm
}

main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi

    local subcommand="$1"
    local action=
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                action=$(echo "$subcommand" | tr '-' '_')
                shift
                break
                ;;
        esac
    done

    if [ -z "$(declare -f "$action")" ]; then
        echo "nested-state: no such command: $subcommand"
        show_help
        exit 1
    fi

    #shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"
    "$action" "$@"
}

main "$@"
