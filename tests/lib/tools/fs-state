#!/bin/bash

show_help() {
    echo "usage: fs-state wait-for-file [filename] [iterations] [sleep-time]"
    echo "usage: fs-state mock-dir [direname]"
    echo "usage: fs-state mock-dir-backup-real [direname]"
    echo "usage: fs-state restore-dir [direname]"
    echo "usage: fs-state mock-file [filename]"
    echo "usage: fs-state mock-file-backup-real [filename]"
    echo "usage: fs-state restore-file [filename]"
}

wait_for_file() {
    local file="$1"
    local iters="$2"
    local sleep_time="$3"

    for _ in $(seq "$iters"); do
        if [ -e "$file" ]; then
            echo "File exists: $file"
            return 0
        fi
        sleep "$sleep_time"
    done
    echo "File does not exists: $file"
    return 1
}

mock_dir() {
    local dir="$1"
    if ! [ -d "$dir" ]; then
        echo "Creating dir: $dir"
        mkdir -p "$dir"
        touch "$dir.fake"
    fi
}

mock_dir_backup_real() {
    local dir="$1"
    if [ -d "$dir" ]; then
        mv "$dir" "$dir.back"
    fi
    echo "Creating dir: $dir"
    mkdir -p "$dir"
    touch "$dir.fake"
}

restore_dir() {
    local dir="$1"

    echo "Cleaning dir: $dir"
    if [ -f "$dir.fake" ]; then
        rm -rf "$dir"
        rm -f "$dir.fake"
    fi
    if [ -d "$dir.back" ]; then
        mv "$dir.back" "$dir"
    fi
}

mock_file() {
    local file="$1"
    if ! [ -e "$file" ]; then
        echo "Creating file: $file"
        echo "content for $file" > "$file"
        echo "content for fake $file" > "$file.fake"
    fi
}

mock_file_backup_real() {
    local file="$1"
    if [ -e "$file" ]; then
        echo "Backuping file: $file"
        mv "$file" "$file.back"
    fi
    # ensure the parent dir is available
    if [ ! -d "$(dirname "$file")" ]; then
        mkdir -p "$(dirname "$file")"
    fi
    fs-state mock-file "$file"
}

restore_file() {
    local file="$1"
    echo "Cleaning file: $file"
    if [ -e "$file.fake" ]; then
        rm -f "$file"
        rm -f "$file.fake"
    fi
    if [ -e "$file.back" ]; then
        mv "$file.back" "$file"
    fi
}

if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

action=
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help|'')
            show_help
            exit 0
            ;;
        *)
            action=$(echo "$1" | tr '-' '_')
            shift
            break
            ;;
    esac
done

"$action" "$@"
