summary: Ensure that the pulseaudio interface works

# Classic Ubuntu is sufficient to test the feature
systems: [ubuntu-1*-*64, ubuntu-2*-*64]

kill-timeout: 3m

environment:
    PLAY_FILE: "/snap/test-snapd-pulseaudio/current/usr/share/sounds/alsa/Noise.wav"
    PA_TEST_LOG: /home/test/pulseaudio.log

prepare: |
    #shellcheck source=tests/lib/pkgdb.sh
    . "$TESTSLIB"/pkgdb.sh
    snap install --edge test-snapd-pulseaudio

    apt-get update
    apt-get install -y pulseaudio pulseaudio-utils

    echo "Create XDG_RUNTIME_DIR=/run/user/12345"
    # shellcheck disable=SC2174
    mkdir -m 700 -p /run/user/12345 || true
    chown test:test /run/user/12345

    # ensure we have a clean pulse directory
    test -d /home/test/.config && mv /home/test/.config /home/test/.config.spread
    mkdir -m 700 /home/test/.config
    mkdir -m 700 /home/test/.config/pulse
    chown test:test /home/test/.config /home/test/.config/pulse

    # prepare the script for pulseaudio daemon
    cat <<'EOF' > /home/test/pulse-test.pa
    .fail
    load-module module-null-sink sink_name=void
    set-default-sink void
    load-module module-native-protocol-unix
    .ifexists module-snap-policy.so
    load-module module-snap-policy
    .endif
    EOF
    chown test:test /home/test/pulse-test.pa
    # make sure there is no socket
    rm -f /run/user/12345/pulse/native

restore: |
    su -l -c "HOME=/home/test XDG_RUNTIME_DIR=/run/user/12345  pulseaudio --kill" test || true
    snap remove --purge test-snapd-pulseaudio
    apt-get autoremove --purge -y pulseaudio pulseaudio-utils
    rm -rf /run/user/12345 /home/test/.config/pulse
    if [ -d /home/test/.config.spread ]; then
        rm -rf /home/test/.config
        mv /home/test/.config.spread /home/test/.config
    fi
    rm -f /home/test/pulse-test.pa
    rm -f /run/user/12345/pulse/native

debug: |
    for l in first second; do
        if [ -f $PA_TEST_LOG.$l ]; then
            cat $PA_TEST_LOG.$l
        fi
        rm -f $PA_TEST_LOG.$l
    done

execute: |
    as_user() {
        su -l -c "HOME=/home/test XDG_RUNTIME_DIR=/run/user/12345 $*" test
    }

    echo "Start pulseaudio first time, logging output to the first log"
    as_user "pulseaudio -vvvv --exit-idle-time=300 -n -F /home/test/pulse-test.pa --log-level=4 --verbose 2>&1 | tee $PA_TEST_LOG.first >/dev/null" &
    papid=$!

    # restart pulseaudio because sometimes it's not able to bind to the required
    # socket, but still is running as a server that clients will try to connect
    # to, but will fail with "Connection refused"
    echo "Kill pulseaudio to restart it"
    as_user "pulseaudio --kill" test &

    # try to manually kill the pulseaudio daemon
    kill -9 "$papid"

    echo "wait for the pulseaudio daemon to die"
    retry-tool -n 10 bash -c "test ! -e /proc/$papid" 

    # now try again
    echo "Start pulseaudio for real, logging output to the second log"
    as_user "pulseaudio -vvvv --exit-idle-time=300 -n -F /home/test/pulse-test.pa --log-level=4 --verbose 2>&1 | tee $PA_TEST_LOG.second >/dev/null" &

    echo "Then wait for the socket to show up"
    retry-tool -n 10 test -S /run/user/12345/pulse/native

    echo "Check pulseaudio"
    retry-tool -n 10 su -l -c "HOME=/home/test XDG_RUNTIME_DIR=/run/user/12345 pulseaudio --check" test

    echo "The unconfined user can play audio"
    as_user "/usr/bin/paplay $PLAY_FILE"

    echo "The unconfined user can record audio"
    as_user "/snap/test-snapd-pulseaudio/current/bin/parec-simple"

    echo "The interface is disconnected by default"
    snap connections test-snapd-pulseaudio | MATCH "pulseaudio +test-snapd-pulseaudio:pulseaudio +- +-"

    echo "When the plug is connected"
    snap connect test-snapd-pulseaudio:pulseaudio

    echo "Then the snap can play audio"
    as_user "test-snapd-pulseaudio.play $PLAY_FILE"

    echo "Then the snap can record audio"
    if ! as_user "test-snapd-pulseaudio.recsimple" ; then
        echo "Could not record audio"
        exit 1
    fi

    if [ "$(snap debug confinement)" = "partial" ] ; then
        exit 0
    fi

    echo "When the plug is disconnected"
    snap disconnect test-snapd-pulseaudio:pulseaudio

    echo "Then the snap command is not able to connect to the pulseaudio socket"
    if as_user "test-snapd-pulseaudio.play $PLAY_FILE" ; then
        echo "Expected error with plug disconnected"
        exit 1
    fi

    # make sure it's killed otherwise spread ssh pty is kept busy
    as_user "pulseaudio --kill" || true
