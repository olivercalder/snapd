summary: Test to ensure that quota groups and systemd accounting is effective.

details: |
  Some older systemd's such as that of xenial, Amazon Linux 2, and Centos 7 
  suffer from an unfortunate bug wherein the accounting for memory and tasks 
  becomes broken and returns the maximum value for a 64-bit integer instead of
  the real value. This test checks that either the system works and does not
  trigger the accounting bug, or that we properly don't attempt to use quota 
  groups on systems that are affected.

prepare: |
  snap install hello-world go-example-webserver remarshal jq
  snap set system experimental.quota-groups=true
  tests.cleanup defer snap unset system experimental.quota-groups

execute: |
  # the bug mainly happens when we create a quota group with nothing in it,
  # then systemd reports using a huge amount of memory or tasks

  # create a root group that will be the top of the tree for all sub-groups
  snap set-quota --memory=400MB top

  # create a sub-group which will actually have a service in it and thus usage
  snap set-quota --memory=100MB --parent=top sub go-example-webserver

  # create another sub-group which will serve as the poisoned branch on buggy
  # systems
  snap set-quota --memory=5000B --parent=top sub2

  # now create a quota group under sub2 with no services in it, but still has a
  # snap in it so that the systemd slice underlying the quota group is generated
  # and exists
  snap set-quota --memory=4900B --parent=sub2 sub21 hello-world

  # check that usage is still sensible for the groups that have real usage - 
  # here 18.4EB is how we format the maximum size of a 64-bit unsigned integer
  # that systemd returns
  # TODO: change this to use the no unit flag when that is a thing so we can
  # compare to actual value
  snap quota sub | yaml2json | jq -r '.current.memory' | NOMATCH "18.4EB"
  snap quota top | yaml2json | jq -r '.current.memory' | NOMATCH "18.4EB"

  # now trigger the bug by removing the sub21 group
  snap remove-quota sub21

  # usage should still be sensible
  snap quota sub | yaml2json | jq -r '.current.memory' | NOMATCH "18.4EB"
  snap quota top | yaml2json | jq -r '.current.memory' | NOMATCH "18.4EB"
