summary: Check basic seccomp rules

details: |
    This test verifies that:
    .
    - absence of a syscall is denied
    - use of a bare syscall (ie, no arguments) is allowed
    - use of a syscall with arg filtering is allowed with matching arguments
    - use of a syscall with arg filtering is denied with unmatching arguments
    .
    We choose the setpriority syscall for these tests since it is available on
    all architectures and can be easily used to test all of the above. As part of
    its testing, this test will modify the snap's seccomp filter and recompile
    it. On strict mode systems, it will also adjust the apparmor profile to allow
    'capability nice' so it doesn't interfere with anything.

# IMPORTANT: adding a system here is an explicit statement that snapd doesn't
# care that the system has broken seccomp mediation. This is unlikely what you
# want. If adding, please add why and any references to supporting context.
# See:
# https://forum.snapcraft.io/t/disabling-seccomp-sandbox-where-a-buggy-golang-seccomp-is-used/11054
#systems: [-fedora-28-*, -debian-*]

environment:
    SRC: /var/lib/snapd/seccomp/bpf/snap.test-snapd-sh.test-snapd-sh.src
    BIN: /var/lib/snapd/seccomp/bpf/snap.test-snapd-sh.test-snapd-sh.bin
    AAP: /var/lib/snapd/apparmor/profiles/snap.test-snapd-sh.test-snapd-sh

prepare: |
    echo "Install a helper snap with default confinement"
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB"/snaps.sh
    install_local test-snapd-sh
    cp "$SRC" "$SRC".orig
    if [ "$(snap debug confinement)" = strict ]; then
        cp "$AAP" "$AAP".orig
        sed 's/^}/capability sys_nice,\n}\n/g' "$AAP".orig > "$AAP"
        apparmor_parser -r "$AAP"
    fi

restore: |
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB/dirs.sh"
    mv -f "$SRC".orig "$SRC"
    "$LIBEXECDIR/snapd/snap-seccomp" compile "$SRC" "$BIN"
    if [ -f "$AAP".orig ]; then
        mv -f "$AAP".orig "$AAP"
        apparmor_parser -r "$AAP"
    fi

execute: |
    #shellcheck source=tests/lib/snaps.sh
    . "$TESTSLIB/dirs.sh"

    # other tests ensure seccomp is available so we can skip any systems that
    # don't have it
    if ! snap debug sandbox-features --required seccomp:bpf-argument-filtering ; then
        exit 0
    fi

    echo "Remove any setpriority rules from the filter"
    sed 's/^\(setpriority.*\)/#SPREAD: \1/g' "$SRC".orig > "$SRC"
    "$LIBEXECDIR/snapd/snap-seccomp" compile "$SRC" "$BIN"
    echo "and check that positive nice fails"
    test-snapd-sh -c "nice -n 10 uptime"  2>&1 | MATCH 'Operation not permitted'
    echo "and check that negative nice fails"
    test-snapd-sh -c "nice -n -10 uptime" 2>&1 | MATCH 'Operation not permitted'

    # Note that nice does not error out if it can't setpriority, so we check
    # for the absense of the error
    echo "Use bare setpriority rule"
    sed 's/^\(setpriority.*\)/#SPREAD: \1\nsetpriority/g' "$SRC".orig > "$SRC"
    "$LIBEXECDIR/snapd/snap-seccomp" compile "$SRC" "$BIN"
    echo "and check that positive nice succeeds"
    ! test-snapd-sh -c "nice -n 10 uptime"  2>&1 | MATCH 'Operation not permitted'
    echo "and check that negative nice succeeds"
    ! test-snapd-sh -c "nice -n -10 uptime" 2>&1 | MATCH 'Operation not permitted'

    echo "Use arg filtered setpriority rule"
    sed 's/^\(setpriority.*\)/#SPREAD: \1\nsetpriority PRIO_PROCESS 0 <=19/g' "$SRC".orig > "$SRC"
    "$LIBEXECDIR/snapd/snap-seccomp" compile "$SRC" "$BIN"
    echo "and check that positive nice succeeds"
    ! test-snapd-sh -c "nice -n 10 uptime" 2>&1 | MATCH 'Operation not permitted'
    echo "and check that negative nice fails"
    test-snapd-sh -c "nice -n -10 uptime"  2>&1 | MATCH 'Operation not permitted'
