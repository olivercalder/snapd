summary: container management snaps should have special systemd unit directives
details: |
    Some special interfaces have additional systemd unit directives added to 
    their systemd units, specifically container management interfaces have the
    Delegate=true snippet added to prevent CVE-2020-27352.

prepare: |
    # build and install the test snap
    snap pack container-mgr-snap
    snap install --dangerous test-snapd-container-mgrs*.snap

execute: |
    echo "Check that all services exist in the snap"

    snap services | MATCH test-snapd-container-mgrs\.docker-support
    snap services | MATCH test-snapd-container-mgrs\.greengrass-support
    snap services | MATCH test-snapd-container-mgrs\.kubernetes-support
    snap services | MATCH test-snapd-container-mgrs\.lxd-support

    snap services | MATCH test-snapd-container-mgrs\.greengrass-no-cont
    snap services | MATCH test-snapd-container-mgrs\.greengrass-legacy-cont

    snap services | MATCH test-snapd-container-mgrs\.kubelet
    snap services | MATCH test-snapd-container-mgrs\.kubeproxy
    snap services | MATCH test-snapd-container-mgrs\.autobind-unix

    snap services | MATCH test-snapd-container-mgrs\.bare

    snap services | MATCH test-snapd-container-mgrs\.multiple-plugs

    echo "Check that the container services have Delegate=true in their service unit exactly once"

    for svc in docker-support greengrass-support kubernetes-support lxd-support greengrass-legacy-cont kubelet kubeproxy multiple-plugs; do

        serviceFile="/etc/systemd/system/snap.test-snapd-container-mgrs.$svc.service"

        cat "$serviceFile" | MATCH "Delegate=true"
        test "$(cat "$serviceFile" | grep "Delegate=true" | wc -l)" = 1

        # connect and disconnect the interfaces to ensure that 
        # connection/disconnection does not effect the presence of Delegate=true

        if [ "$svc" = "multiple-plugs" ]; then
            snap connect "test-snapd-container-mgrs:docker-support"
            snap connect "test-snapd-container-mgrs:greengrass-support"
            snap connect "test-snapd-container-mgrs:kubernetes-support"
            snap connect "test-snapd-container-mgrs:lxd-support"
        else
            snap connect "test-snapd-container-mgrs:$svc"
        fi

        cat "$serviceFile" | MATCH "Delegate=true"
        test "$(cat "$serviceFile" | grep "Delegate=true" | wc -l)" = 1

        if [ "$svc" = "multiple-plugs" ]; then
            snap disconnect "test-snapd-container-mgrs:docker-support"
            snap disconnect "test-snapd-container-mgrs:greengrass-support"
            snap disconnect "test-snapd-container-mgrs:kubernetes-support"
            snap disconnect "test-snapd-container-mgrs:lxd-support"
        else
            snap disconnect "test-snapd-container-mgrs:$svc"
        fi

        cat "$serviceFile" | MATCH "Delegate=true"
        test "$(cat "$serviceFile" | grep "Delegate=true" | wc -l)" = 1
    done

    echo "Check that the non-container manager services do not have Delegate=true in their service units"

    for svc in bare "autobind-unix" "greengrass-no-cont"; do 
        serviceFile="/etc/systemd/system/snap.test-snapd-container-mgrs.$svc.service"
        cat "$serviceFile" | NOMATCH "Delegate=true"
    done

    # only run this test on ubuntu since the docker snap is not guaranteed to 
    # work on non-ubuntu systems

    if ! os.query is-ubuntu; then
        echo "skipping docker test on non-ubuntu"
    fi

    snap install docker

    echo "Test that docker container cgroups on ubuntu are not moved when systemctl daemon-reload is executed"

    # start a docker container - need to wait until dockerd comes alive
    retry -n10 --wait 1 sh -c 'docker run -d --name test ubuntu:18.04 sleep infinity'

    # make sure that docker top can see the process
    docker top test | MATCH "sleep infinity"

    # get the pid of that docker container
    containerPID=$(docker top test | grep "sleep infinity" | awk '{print $2}')

    containerCgroupBefore=$(cat "/proc/$containerPID/cgroup" | grep devices)

    # reload systemd 
    systemctl daemon-reload

    # check the container cgroup again
    containerCgroupAfter=$(cat "/proc/$containerPID/cgroup" | grep devices)

    if [ "$containerCgroupBefore" != "$containerCgroupAfter" ]; then
        echo "test broken, container was moved from cgroup \"$containerCgroupBefore\" to \"$containerCgroupAfter\""
        exit 1
    fi
