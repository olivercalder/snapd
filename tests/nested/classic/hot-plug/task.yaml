summary: create ubuntu classic image, install snapd and test hot plug feature

prepare: |
    #shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"
    create_nested_classic_vm

    copy_remote "${GOHOME}"/snapd_*.deb
    execute_remote "sudo apt update"
    execute_remote "sudo apt install -y ./snapd_*.deb"
    #shellcheck disable=SC2016
    execute_remote 'sudo apt install -y linux-image-extra-$(uname -r) || sudo apt install -y linux-modules-extra-$(uname -r)'

    snap pack "$TESTSLIB"/snaps/serial-port-hotplug
    copy_remote serial-port-hotplug_1.0_all.snap
    # add test user to dialout group required for ttyUSB* devices
    execute_remote "sudo usermod -a -G dialout user1"

restore: |
    #shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"
    destroy_nested_vm

execute: |
    hotplug_add_dev1() {
        add_tty_chardev my-chardev /dev/tty5
        add_usb_serial_device my-usb-serial my-chardev 1234
    }

    hotplug_del_dev1() {
        del_device my-usb-serial
        remove_chardev my-chardev
    }

    hotplug_add_dev2() {
        add_tty_chardev my-chardev2 /dev/tty6
        add_usb_serial_device my-usb-serial2 my-chardev2 5678
    }

    hotplug_del_dev2() {
        del_device my-usb-serial2
        remove_chardev my-chardev2
    }

    check_slot_not_present() {
        for _ in $(seq 10); do
            if ! execute_remote "snap interfaces" | MATCH ":qemuusbserial"; then
                break
            fi
            sleep 1
        done
        if execute_remote "snap interfaces" | MATCH ":qemuusbserial"; then
            echo "qemuusbserial interface shouldn't be present anymore"
            exit 1
        fi
    }

    check_slot_present() {
        for _ in $(seq 10); do
            if execute_remote "snap interfaces" | MATCH ":qemuusbserial"; then
                break
            fi
            sleep 1
        done
        execute_remote "snap interfaces" | MATCH ":qemuusbserial"
    }

    check_slot_connected() {
        for _ in $(seq 10); do
            if execute_remote "snap interfaces" | MATCH ":qemuusbserial.*serial-port-hotplug"; then
                break
            fi
            sleep 1

        done
        execute_remote "snap interfaces" | MATCH ":qemuusbserial.*serial-port-hotplug"
    }

    verify_apparmor_profile() {
        DEVPATH=$1
        for _ in $(seq 10); do
            if execute_remote "cat /var/lib/snapd/apparmor/profiles/snap.serial-port-hotplug.consumer" | MATCH "$DEVPATH rw,"; then
                break
            fi
            sleep 1
        done
        execute_remote "cat /var/lib/snapd/apparmor/profiles/snap.serial-port-hotplug.consumer" | MATCH "$DEVPATH rw,"
    }

    #shellcheck source=tests/lib/nested.sh
    . "$TESTSLIB/nested.sh"

    if execute_remote "udevadm info -e" | MATCH "ID_MODEL=QEMU_USB_SERIAL"; then
        echo "Usb serial already registered, exiting..."
        exit 1
    fi

    execute_remote "sudo snap install hello-world"

    echo "Enabling hotplug"
    execute_remote "sudo snap set core experimental.hotplug=true"

    echo "Plugging the device"
    hotplug_add_dev1

    # sanity checks to make sure qemu setup is correct
    for _ in $(seq 5); do
        if execute_remote "udevadm info -e" | MATCH "ID_MODEL=QEMU_USB_SERIAL"; then
            break
        fi
        sleep 1
    done

    execute_remote "ls /dev/tty*" | MATCH "ttyUSB0"

    echo "Checking that qemuusbserial hotplug slot is present"
    check_slot_present

    echo "Unplugging the device"
    hotplug_del_dev1

    for _ in $(seq 5); do
        if execute_remote "udevadm info -e" | MATCH "ID_MODEL=QEMU_USB_SERIAL"; then
            sleep 1
        else
            break
        fi
    done

    if execute_remote "udevadm info -e" | MATCH "ID_MODEL=QEMU_USB_SERIAL"; then
        echo "Usb serial should not be registered anymore, exiting..."
        exit 1
    fi

    echo "Checking that qemuusbserial hotplug slot is no longer present"
    check_slot_not_present

    echo "Plugging the device back"
    hotplug_add_dev1

    echo "Checking that qemuusbserial hotplug slot is present again"
    check_slot_present

    echo "Installing test snap with serial port plug"
    execute_remote "sudo snap install --dangerous serial-port-hotplug_1.0_all.snap"

    echo "Connecting serial-port interface"
    execute_remote "sudo snap connect serial-port-hotplug:serial-port :qemuusbserial"
    check_slot_connected

    echo "Veryfing serial-port permissions"
    verify_apparmor_profile "/dev/ttyUSB0"
    execute_remote "/snap/bin/serial-port-hotplug.consumer" | MATCH "Access to /dev/ttyUSB0 ok"
    execute_remote "/snap/bin/serial-port-hotplug.consumer" | MATCH "Access to /dev/ttyUSB1 failed"

    echo "Unplugging the device"
    hotplug_del_dev1

    echo "Checking that qemuusbserial hotplug slot is no longer present"
    check_slot_not_present

    echo "Plugging device back, checking that connection is restored"
    hotplug_add_dev1
    check_slot_connected

    echo "Unplugging the device"
    hotplug_del_dev1

    echo "Checking that qemuusbserial hotplug slot is not present"
    check_slot_not_present

    echo "Plugging second device"
    hotplug_add_dev2

    echo "Plugging first device back while second device is present, checking that connection is restored"
    hotplug_add_dev1
    check_slot_connected

    echo "Veryfing serial-port permissions, the first device is now expected on ttyUSB1"
    verify_apparmor_profile "/dev/ttyUSB1"
    execute_remote "/snap/bin/serial-port-hotplug.consumer" | MATCH "Access to /dev/ttyUSB0 failed"
    execute_remote "/snap/bin/serial-port-hotplug.consumer" | MATCH "Access to /dev/ttyUSB1 ok"

    echo "Restarting snapd should restore hotplug interface"
    execute_remote "sudo systemctl stop snapd.service snapd.socket"
    execute_remote "sudo systemctl start snapd.service snapd.socket"
    check_slot_connected
    execute_remote "/snap/bin/serial-port-hotplug.consumer" | MATCH "Access to /dev/ttyUSB1 ok"
