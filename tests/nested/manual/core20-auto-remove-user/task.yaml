summary: Verify that snapd correctly removes expired users created with assertions.

systems: [ubuntu-20.04-64, ubuntu-22.04-64]

environment:
  # use snapd from the spread run so that we have testkeys trusted in the
  # snapd run
  NESTED_BUILD_SNAPD_FROM_CURRENT: true

  # use secure boot and TPM to enable encryption
  NESTED_ENABLE_TPM: true
  NESTED_ENABLE_SECURE_BOOT: true

  # don't use cloud-init it doesn't work with grade secured
  NESTED_USE_CLOUD_INIT: false

  # sign all the snaps we build for the image with fakestore
  NESTED_SIGN_SNAPS_FAKESTORE: true

  NESTED_CUSTOM_AUTO_IMPORT_ASSERTION: $(pwd)/user1.assert
  NESTED_CUSTOM_MODEL: $TESTSLIB/assertions/developer1-{VERSION}-secured.model

  # for the fake store
  NESTED_FAKESTORE_BLOB_DIR: $(pwd)/fake-store-blobdir
  NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL: http://localhost:11028

  # unset this otherwise ubuntu-image complains about overriding the channel for
  # a model with grade higher than dangerous when building the image
  NESTED_CORE_CHANNEL: ""

prepare: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  snap install remarshal jq
  tests.cleanup defer snap remove remarshal
  tests.cleanup defer snap remove jq

  # set the expiration of the assert to 60 minutes, and replace the version
  # with the version we are testing
  VERSION="$(tests.nested show version)"
  EXPIRATION=$(date --rfc-3339=seconds -d "$(date) + 60 minute" | sed 's/ /T/')

  #shellcheck disable=SC2002
  cat ./user1.json | jq --arg date "$EXPIRATION" '. + {until: $date}' > ./user1-final.json
  sed -i "s/{VERSION}/$VERSION/g" ./user1-final.json

  # sign the user1.json using gendeveloper1
  gendeveloper1 sign-model < ./user1-final.json > user1.assert
  
  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"

  #shellcheck source=tests/lib/store.sh
  . "$TESTSLIB"/store.sh

  # Setup the fake-store for ubuntu-image to use when creating our core image.
  # We immediately tear down the staging store, to make sure snapd is not pointed
  # towards this once we invoke ubuntu-image. 
  # We also need to point NESTED_UBUNTU_IMAGE_SNAPPY_FORCE_SAS_URL towards the newly
  # setup fake-store to actually have it use it.
  setup_fake_store "$NESTED_FAKESTORE_BLOB_DIR"
  teardown_staging_store

  echo "Expose the needed assertions through the fakestore"
  cp "$TESTSLIB"/assertions/developer1.account "$NESTED_FAKESTORE_BLOB_DIR/asserts"
  cp "$TESTSLIB"/assertions/developer1.account-key "$NESTED_FAKESTORE_BLOB_DIR/asserts"

  KEY_NAME=$(tests.nested download snakeoil-key)
  SNAKEOIL_KEY="$PWD/$KEY_NAME.key"
  SNAKEOIL_CERT="$PWD/$KEY_NAME.pem"

  # Get the nested system version
  VERSION="$(tests.nested show version)"

  echo "Grab and prepare the gadget snap"
  snap download --basename=pc --channel="$VERSION/edge" pc
  unsquashfs -d pc-gadget pc.snap

  echo "Sign the shim binary"
  tests.nested secboot-sign gadget pc-gadget "$SNAKEOIL_KEY" "$SNAKEOIL_CERT"

  echo "Add the prepare-device hook"
  mkdir -p pc-gadget/meta/hooks
  cp prepare-device pc-gadget/meta/hooks/prepare-device

  # delay all refreshes for a week from now, as otherwise refreshes for our 
  # snaps (which are asserted by the testrootorg authority-id) may happen, which
  # will break things because the signing keys won't match, etc. and 
  # specifically snap-bootstrap in the kernel snap from the store won't trust
  # the seed keys to unlock the encrypted data partition in the initramfs
  sed defaults.yaml -e "s/HOLD-TIME/$(date --date="next week" +%Y-%m-%dT%H:%M:%S%:z)/" >> \
    pc-gadget/meta/gadget.yaml

  snap pack pc-gadget/ "$(tests.nested get extra-snaps-path)"

  #shellcheck disable=SC2148
  systemd-run --collect --unit fakedevicesvc fakedevicesvc localhost:11029

  tests.nested build-image core
  tests.nested create-vm core

restore: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  systemctl stop fakedevicesvc

  #shellcheck source=tests/lib/store.sh
  . "$TESTSLIB"/store.sh
  teardown_fake_store "$NESTED_FAKESTORE_BLOB_DIR"

execute: |
  if [ "$TRUST_TEST_KEYS" = "false" ]; then
      echo "This test needs test keys to be trusted"
      exit
  fi

  #shellcheck source=tests/lib/nested.sh
  . "$TESTSLIB/nested.sh"

  # wait until device is initialized and has a serial
  tests.nested wait-for device-initialized

  # ensure we are looking at the correct user
  remote.exec "snap known system-user" | MATCH "format: 2"
  remote.exec "snap known system-user" | MATCH "name: user1"
  remote.exec "snap known system-user" | MATCH "user-presence: until-expiration"

  # lets put the system time ahead by 1h
  remote.exec "sudo timedatectl set-ntp false"
  remote.exec "sudo date -s 'next hour'"

  # run ensure state to have the user removed
  remote.exec "sudo snap debug ensure-state-soon"

  # Now at some point ensure will run, and the user we've been using
  # for SSH will be removed, which should result in the below error 
  # message
  retry -n 30 --wait 1 sh -c "remote.exec snap changes 2>&1 | MATCH 'Permission denied, please try again'"
