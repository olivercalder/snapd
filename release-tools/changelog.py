#!/usr/bin/env python3

import argparse
import datetime
import os
import re

import debian.changelog


def parse_arguments():
    parser = argparse.ArgumentParser(description="automatic changelog writer for snapd")
    parser.add_argument("version", type=str, help="new snapd version")
    parser.add_argument(
        "changelog",
        type=argparse.FileType("r"),
        help="path to new changelog entry as generated by snappy-dch",
    )
    return parser.parse_args()


debianishDistros = [
    # first element is the name of the distro in the packaging directory
    # second element is the debian distribution name
    # third element is the suffix to add to the version number when generating
    # the changelog
    ("ubuntu-14.04", "trusty", "~14.04"),
    ("ubuntu-16.04", "xenial", ""),
    ("debian-sid", "unstable", "-1"),
]

otherDistros = [
    "opensuse",
    "fedora",
    "arch",
]


def rewriteVersionNumberFile(file, vers, pattern):
    # simple sed implementation, read all the lines first, then write them out
    # again, applying the given pattern to every line (the pattern is expected
    # to only ever match one line)
    with open(file, "r") as fh:
        lines = fh.readlines()
    with open(file, "w") as fh:
        for line in lines:
            fh.write(re.sub(pattern + ".+$", pattern + vers, line))


def updateFedoraChangelog(opts, snapdPackagingDir, newChangelogEntry, maintainer):
    specFile = os.path.join(snapdPackagingDir, "fedora", "snapd.spec")
    # rewrite the snapd.spec file with the right version
    rewriteVersionNumberFile(
        # meh this is terrible, to keep the right indentation level,
        # prepend the number of spaces we currently have in the file to
        # the version number
        specFile,
        "        %s" % opts.version,
        "Version:",
    )

    # now we also need to add the changelog entry to the snapd.spec file
    # this is a bit tricky, since we want a different format for the
    # changelog in snapd.spec than we have for debian, but luckily it's
    # just trimming whitespace off the front of each line in the
    # changelog

    dedentedChangeLogLines = []
    for line in newChangelogEntry.splitlines():
        if len(line) < 5:
            raise RuntimeError("unexpected changelog line, line too short")
        # strip the first 3 characters which are space characters so
        # that we only have one single whitespace
        dedentedChangeLogLines.append(line[3:] + "\n")

    date = datetime.datetime.now().strftime("%a %d %b %Y")

    dateAndMaintainerHeader = "* %s %s <%s>\n" % (
        date,
        maintainer[0],
        maintainer[1],
    )
    changeLogHeader = "- New upstream release %s\n" % opts.version
    fedoraChangeLogEntryLines = [
        dateAndMaintainerHeader,
        changeLogHeader,
    ] + dedentedChangeLogLines

    # now read all the existing lines of the snapd.spec file
    with open(specFile, "r") as fh:
        currentSpecLines = fh.readlines()

    # re-write them all out to the file again, inserting our new
    # changelog entryfiles when we get to that section
    with open(specFile, "w") as fh:
        for line in currentSpecLines:
            fh.write(line)
            # if this line was the start of the changelog section, then
            # we need to insert our change log entry lines
            if line.strip() == "%changelog":
                # before continuing to write the rest of the file,
                # insert our new changelog entry here
                for chLine in fedoraChangeLogEntryLines:
                    fh.write(chLine)
                fh.write("\n")


def updateOpensuseChangelog(opts, snapdPackagingDir, newChangelogEntry, maintainer):
    specFile = os.path.join(snapdPackagingDir, "opensuse", "snapd.spec")
    changesFile = os.path.join(snapdPackagingDir, "opensuse", "snapd.changes")
    rewriteVersionNumberFile(
        # meh this is terrible, to keep the right indentation level,
        # prepend the number of spaces we currently have in the file to
        # the version number
        specFile,
        "        " + opts.version,
        "Version:",
    )

    # also add a template changelog to the changes file
    date = datetime.datetime.now().strftime("%a, %d %b %Y %H:%M:%S %z")

    email = maintainer[1]
    templ = """-------------------------------------------------------------------
%s - %s

- Update to upstream release %s

""" % (
        date,
        email,
        opts.version,
    )

    # first read the existing changelog lines
    with open(changesFile, "r") as fh:
        current = fh.read()
    with open(changesFile, "w") as fh:
        fh.write(templ)
        fh.write(current)


def main(opts):
    thisScript = os.path.realpath(__file__)
    snapdRootGitDir = os.path.dirname(os.path.dirname(thisScript))
    snapdPackagingDir = os.path.join(snapdRootGitDir, "packaging")

    # read all the changelog entries, expected to be formatted by snappy-dch
    newChangelogEntry = opts.changelog.read()

    # read the name and email of the person running the script using i.e. dch
    # conventions
    maintainer = debian.changelog.get_maintainer()

    # first handle all of the debian packaging files
    for distro in debianishDistros:
        debianPackagingChangelog = os.path.join(
            snapdPackagingDir, distro[0], "changelog"
        )
        with open(debianPackagingChangelog) as fh:
            ch = debian.changelog.Changelog(fh)

        # setup a new block
        ch.new_block(
            package="snapd",
            version=opts.version + distro[2],
            distributions=distro[1],
            urgency="medium",
            author="%s <%s>" % maintainer,
            date=debian.changelog.format_date(),
        )

        # add the new changelog entry with our standard header
        # the spacing here is manually adjusted, the top of the comment is always
        # the same
        templ = "\n  * New upstream release, LP: #1926005\n" + newChangelogEntry
        ch.add_change(templ)

        # write it out back to the changelog file
        with open(debianPackagingChangelog, "w") as fh:
            ch.write_to_open_file(fh)

    # now handle all of the non-debian packaging files
    for distro in otherDistros:
        if distro == "arch":
            # for arch all we need to do is change the PKGBUILD "pkgver" key
            rewriteVersionNumberFile(
                os.path.join(snapdPackagingDir, "arch", "PKGBUILD"),
                opts.version,
                "pkgver=",
            )
        elif distro == "fedora":
            updateFedoraChangelog(
                opts, snapdPackagingDir, newChangelogEntry, maintainer
            )

        elif distro == "opensuse":
            updateOpensuseChangelog(
                opts, snapdPackagingDir, newChangelogEntry, maintainer
            )


if __name__ == "__main__":
    opts = parse_arguments()
    main(opts)
